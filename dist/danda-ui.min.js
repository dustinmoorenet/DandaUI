var M={},U={};M.Message=HumanModel.define({type:"message",props:{type:["string",!0,"alert"],title:["string",!0,"Important Message"],content:["string",!0],response:"string",remember_response:"boolean"},session:{options:["array",!0,[]],built_in_options:["object",!0,{alert:["OK"],confirm:["OK","Cancel"],question:["Yes","No"]}]},initialize:function(){this.listenTo(this,"change:type",this.onTypeChange),this.onTypeChange(this,this.type)},onTypeChange:function(a,b){var c=this.built_in_options[b];c&&(this.options=c)}});var G={};this.JST=this.JST||{},this.JST.modal=Handlebars.template(function(a,b,c,d,e){return this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,a.helpers),e=e||{},'<div class="modal">\n  <div class="wrapper">\n    <div class="content"></div>\n  </div>\n</div>\n'}),this.JST.modal_message=Handlebars.template(function(a,b,c,d,e){return this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,a.helpers),e=e||{},'<div class="message">\n  <div class="title"></div>\n  <div class="content"></div>\n  <div class="buttons"></div>\n</div>\n'}),this.JST.panel_tabs=Handlebars.template(function(a,b,c,d,e){return this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,a.helpers),e=e||{},'<div class="panel tabs">\n  <div class="panels"></div>\n  <div class="labels"></div>\n  <div class="labels-cover"></div>\n</div>\n'}),this.JST.select=Handlebars.template(function(a,b,c,d,e){return this.compilerInfo=[4,">= 1.0.0"],c=this.merge(c,a.helpers),e=e||{},'<div class="select">\n  <button class="display"></button>\n  <div class="options"></div>\n</div>\n'}),G.Tapable=HumanView.extend({events:{click:"onClick",touchstart:"onTouchStart",mousedown:"onMouseDown",keydown:"onKeyDown"},initialize:function(){this.onDone=this.onDone.bind(this),this.onCancel=this.onCancel.bind(this)},onClick:function(a){a.preventDefault()},onKeyDown:function(a){(13===a.which||32===a.which)&&(this.onStart(),window.setTimeout(this.onDone,200))},onTouchStart:function(){this.onStart(),this.touch=!0,$("body").on("touchend."+this.cid,this.onDone),$("body").on("touchmove."+this.cid,this.onCancel),window.setTimeout(this.onCancel,500)},onMouseDown:function(){this.touch||(this.onStart(),$("body").on("mouseup."+this.cid,this.onDone))},onStart:function(){this.cleanUp(),this.$el.addClass("active")},onDone:function(){return this.canceled?(this.cleanUp(),void 0):(this.cleanUp(),this.trigger("tap",this),this.id&&this.trigger("tap-"+this.id,this),void 0)},onCancel:function(){this.canceled=!0,this.$el.removeClass("active")},cleanUp:function(){this.touch=!1,this.canceled=!1,$("body").off("."+this.cid),this.$el.removeClass("active")}}),G.Input={},G.Modal=HumanView.extend({template:JST.modal,render:function(a){return this.renderAndBind(),this.renderSubview(a,".content"),this}}),G.Panel={},G.Input.Button=G.Tapable.extend({tagName:"button",setText:function(a){this.text_class&&this.$el.removeClass(this.text_class),this.text=a,this.id=a.replace(" ","-").toLowerCase(),this.$el.attr("value",a),this.$el.text(a),this.$el.addClass("text")},setIcon:function(a){this.$el.addClass("icon "+a)},disable:function(a){a?this.$el.prop("disabled",!0):this.$el.removeProp("disabled")}}),G.Input.Select=HumanView.extend({events:{"change select":"realSelectChanged"},template:JST.select,initialize:function(a){this.options={},this.$select=$((a||{}).select||$("<select />")),this.render()},render:function(){this.renderAndBind(),this.$select.remove().appendTo(this.el),this.display=new G.Input.Button({el:this.$(".display")}),this.display.setIcon("icon-triangle"),this.listenTo(this.display,"tap",this.toggleDisplay),this.copyOptions()},copyOptions:function(){var a=$("option",this.$select).remove();a.each(function(a){this.addOption({value:a.value,name:$(a).text()})}.bind(this)),this.select(this.$select.val())},addOption:function(a){var b=$("<option />").text(a.text).val(a.value);this.$select.append(b);var c=$("<div />").text(a.text).attr("value",a.value);c=new G.Tapable({el:c,id:a.value}),this.options[a.value]=c,this.$(".options").append(c.el),this.listenTo(c,"tap",this.optionSelected)},removeOption:function(){},toggleDisplay:function(){this.$el.toggleClass("show")},realSelectChanged:function(){this.select(this.$select.val())},select:function(a){var b=this.options[a];b&&this.optionSelected(b)},optionSelected:function(a){this.selected_option!==a&&(this.$(".options div").removeClass("selected"),a.$el.addClass("selected"),this.selected_option=a,this.display.setText(a.$el.text()),this.commitSelectedOption())},commitSelectedOption:function(){this.$el.removeClass("show"),this.$select.val(this.selected_option.id)}}),G.Input.Text=Backbone.View.extend({tagName:"input",attributes:{type:"text"},disable:function(a){a?this.$el.prop("disabled",!0):this.$el.removeProp("disabled")}}),G.Input.ToggleButtons=Backbone.View.extend({className:"toggle-buttons",initialize:function(a){this.buildButtons((a||{}).buttons||[]),this.listenTo(this,"tap",this.setChecked)},buildButtons:function(a){a.forEach(this.buildButton.bind(this))},buildButton:function(a){var b=new G.Input.Button;b.setText(a),this.$el.append(b.el),this.listenTo(b,"all",this.onButtonEvent)},setChecked:function(a){this.$("button").removeClass("checked"),a.$el.addClass("checked")},onButtonEvent:function(){this.trigger.apply(this,arguments)}}),G.Modal.Message=HumanView.extend({textBindings:{title:".title"},htmlBindings:{content:".content"},template:JST.modal_message,initialize:function(){this.modal=new G.Modal,this.modal.render(this)},render:function(){return this.renderAndBind(),this.addButtons(),this},addButtons:function(){var a=this.model.options;a.forEach(this.addButton.bind(this))},addButton:function(a){var b=new G.Input.Button;b.setText(a),this.$(".buttons").append(b.el),this.listenTo(b,"all",this.routeEvent),this.listenTo(b,"tap",this.setResponse.bind(this,a))},close:function(){this.modal.remove()},routeEvent:function(){this.trigger.apply(this,arguments)},setResponse:function(a){this.model.response=a,this.modal.remove()}}),G.Panel.Base=Backbone.View.extend({className:"base panel"}),G.Panel.Tabs=HumanView.extend({template:JST.panel_tabs,initialize:function(a){this.panels=a.panels,this.panel_lookup={}},render:function(){return this.renderAndBind(),this.addPanels(),this},addPanels:function(){this.panels.forEach(this.addPanel.bind(this)),this.select(0)},addPanel:function(a){a.tab=new G.Input.Button,a.tab.setText(a.label),a.icon&&a.tab.setIcon(a.icon),this.$(".labels").append(a.tab.el),this.listenTo(a.tab,"tap",this.togglePanel.bind(this,a.panel)),this.registerSubview(a.tab),this.renderSubview(a.panel,".panels"),this.panel_lookup[a.panel.cid]=a},togglePanel:function(a,b){this.$(".panels > *").hide(),a.$el.show(),this.$(".labels > button").removeClass("selected"),b.$el.addClass("selected")},select:function(a){var b;b=a.el?this.panel_lookup[a.cid]:this.panels[a],this.togglePanel(b.panel,b.tab)}});
//# sourceMappingURL=danda-ui.map